<org.training.example.xtream.Person>
  <name>name</name>
  <age>1</age>
  <friends/>
  <phones class="java.util.concurrent.ConcurrentHashMap" serialization="custom">
    <unserializable-parents/>
    <java.util.concurrent.ConcurrentHashMap>
      <default>
        <segmentMask>15</segmentMask>
        <segmentShift>28</segmentShift>
        <segments>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <loadFactor>0.75</loadFactor>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
        </segments>
      </default>
      <string>1</string>
      <string>1234</string>
      <null/>
      <null/>
    </java.util.concurrent.ConcurrentHashMap>
  </phones>
  <house>
    <name>h</name>
    <id>2</id>
  </house>
</org.training.example.xtream.Person>
